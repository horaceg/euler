let bignum =
  "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"

let print_seq start len =
  String.iter (fun x -> print_char x) (String.sub bignum start len)

let product position =
  let stop = position - 12 in
  let rec compute e =
    match e - stop with
    | -1 -> 1
    | _ ->
        let next = Char.escaped bignum.[e] |> int_of_string in
        (* print_int next ; print_string " " ; *)
        next * compute (e - 1)
  in
  compute position

let rec walk position max_so_far =
  match position with
  | 11 -> max_so_far
  | n ->
      let p = product position in
      if p > max_so_far then (
        print_seq (position - 12) 13;
        print_string " | ";
        print_int p;
        print_newline ();
        walk (position - 1) p)
      else walk (position - 1) max_so_far

let () =
  walk 999 0 |> print_int;
  print_newline ()
